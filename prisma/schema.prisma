generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int      @id @default(autoincrement())
  first_name            String
  first_name_unaccented String
  last_name             String
  last_name_unaccented  String
  email                 String   @unique
  password              String
  phone                 String
  address               String?
  privacy_consent       Boolean
  deleted               Boolean  @default(false)
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now())

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Role {
  id              Int     @id @default(autoincrement())
  name            String  @unique
  name_unaccented String  @unique
  deleted         Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User User[]

  @@map("roles")
}

model Product {
  id                     Int      @id @default(autoincrement())
  name                   String
  name_unaccented        String
  description            String?
  description_unaccented String?
  purchase_price         Int //preço em centavos
  selling_price          Int //preço em centavos
  stock                  Int      @default(0)
  deleted                Boolean  @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @default(now())

  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  supplier_id   Int
  supplier      Supplier        @relation(fields: [supplier_id], references: [id])
  SaleItem      SaleItem[]
  StockMovement StockMovement[]

  @@map("products")
}

model Category {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  name_unaccented String   @unique
  deleted         Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  products Product[]

  @@map("categories")
}

model Supplier {
  id              Int      @id @default(autoincrement())
  name            String
  name_unaccented String
  phone           String
  email           String?  @unique
  deleted         Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  products Product[]

  @@map("suppliers")
}

model Sale {
  id         Int      @id @default(autoincrement())
  total      Int //preço em centavos
  deleted    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  items SaleItem[]

  @@map("sales")
}

model SaleItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  unit_price Int //preço em centavos
  subtotal   Int //preço em centavos
  deleted    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  sale_id    Int
  sale       Sale    @relation(fields: [sale_id], references: [id])
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  @@map("sales_items")
}

enum StockType {
  increase // Entrada no estoque
  decrease // Saída do estoque
}

model StockMovement {
  id         Int       @id @default(autoincrement())
  type       StockType
  quantity   Int
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  @@map("stock_movements")
}

model Report {
  id          String   @id @default(uuid())
  title       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@map("reports")
}
